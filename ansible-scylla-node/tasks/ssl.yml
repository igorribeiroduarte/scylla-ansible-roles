---
- set_fact:
    _localhost_cert_path: "{{ scylla_ssl.localhost_cert_path | default(inventory_dir) }}"

- name: For every node, check if crt file exists
  stat:
    path: "{{ _localhost_cert_path }}/ssl/{{ hostvars[item]['inventory_hostname'] }}/{{ hostvars[item]['inventory_hostname'] }}.crt"
  register: _node_crt
  loop: "{{ groups['scylla'] }}"
  delegate_to: localhost
  run_once: true

- name: For every node, check if key file exists
  stat:
    path: "{{ _localhost_cert_path }}/ssl/{{ hostvars[item]['inventory_hostname'] }}/{{ hostvars[item]['inventory_hostname'] }}.pem"
  register: _node_key
  loop: "{{ groups['scylla'] }}"
  delegate_to: localhost
  run_once: true

- name: Set existence of crt and key as a single fact
  set_fact:
    _crt_and_key_exist: "{{ item.stat.exists }}"
  loop: "{{ _node_crt.results + _node_key.results }}"
  when: _crt_and_key_exist is not defined or _crt_and_key_exist == True
  run_once: true

- name: Check if CA exists
  block:
    - name: Check if CA crt file exists
      stat:
        path: "{{ _localhost_cert_path }}/ssl/ca/{{ scylla_cluster_name }}-ca.crt"
      register: _ca_crt
    - name: Check if CA key file exists
      stat:
        path: "{{ _localhost_cert_path }}/ssl/ca/{{ scylla_cluster_name }}-ca.pem"
      register: _ca_key
    - set_fact:
        _ca_crt_and_key_exist: "{{ _ca_crt.stat.exists|bool and _ca_key.stat.exists|bool }}"
  delegate_to: localhost
  run_once: true

- fail:
    msg: "If you want to use your own node certificates you also have to provide a CA"
  when: _crt_and_key_exist and not _ca_crt_and_key_exist

- name: If crt and keys were not provided for all nodes and no CA was provided, generate a self-signed CA
  block:
    - name: Create dir for the CA
      file:
        path: "{{ _localhost_cert_path }}/ssl/ca"
        state: directory

    - name: Generate an OpenSSL private key for the CA.
      openssl_privatekey:
        path: "{{ _localhost_cert_path }}/ssl/ca/{{ scylla_cluster_name }}-ca.pem"

    - name: Generate an OpenSSL Certificate Signing Request for the CA
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ _localhost_cert_path }}/ssl/ca/{{ scylla_cluster_name }}-ca.pem"
        common_name: "{{ scylla_cluster_name }}.internal"
        use_common_name_for_san: false  # since we do not specify SANs, don't use CN as a SAN
        basic_constraints:
          - 'CA:TRUE'
        basic_constraints_critical: yes
        key_usage:
          - keyCertSign
        key_usage_critical: true
      register: ca_csr

    - name: Generate a Self Signed OpenSSL certificate for the CA
      community.crypto.x509_certificate:
        path: "{{ _localhost_cert_path }}/ssl/ca/{{scylla_cluster_name }}-ca.crt"
        privatekey_path: "{{ _localhost_cert_path }}/ssl/ca/{{ scylla_cluster_name }}-ca.pem"
        csr_content: "{{ ca_csr.csr }}"
        provider: selfsigned
  when: _crt_and_key_exist == False and _ca_crt_and_key_exist == False
  delegate_to: localhost
  run_once: true

- name: Generate CSR
  block:
    - name: Create a directory for the key
      file:
        path: "{{ scylla_ssl.localhost_node_cert_path }}"
        state: directory
      delegate_to: localhost

    - name: Generate an OpenSSL private key.
      openssl_privatekey:
        path: "{{ scylla_ssl.localhost_node_cert_path }}/scylla.pem"
      delegate_to: localhost

    - name: Generate an OpenSSL Certificate Signing Request
      openssl_csr:
        path: "{{ localhost_node_cert_path }}/scylla.csr"
        privatekey_path: "{{ scylla_ssl.localhost_node_cert_path }}/scylla.pem"
        common_name: "{{ scylla_ssl.common_name }}"
      delegate_to: localhost
  when: _crt_and_key_exist == False


- name: Generate an OpenSSL certificate signed with our CA certificate
  openssl_certificate:
    path: "{{ scylla_ssl.localhost_node_cert_path }}/scylla.crt"
    csr_path: "{{ scylla_ssl.localhost_node_cert_path }}/scylla.csr"
    ownca_path: "{{ _localhost_cert_path }}/ssl/ca/{{scylla_cluster_name }}-ca.crt"
    ownca_privatekey_path: "{{ _localhost_cert_path }}/ssl/ca/{{ scylla_cluster_name }}-ca.pem"
    provider: ownca
  delegate_to: localhost
  when: scylla_ssl.use_valid_ca is not defined or scylla_ssl.use_valid_ca|bool == false

- name: Use ACME account for signing the certificates
  block:
    - name: Create a DNS-01 challenge 
      account_key_src: "{{ scylla_ssl.acme_account_key }}"
      account_email: "{{ acme_account_email }}"
      src: {{ scylla_ssl.localhost_node_cert_path }}/scylla.csr
      cert: {{ scylla_ssl.localhost_node_cert_path }}/scylla.crt
      challenge: dns-01
      acme_directory: https://acme-v01.api.letsencrypt.org/directory
      # Renew if the certificate is at least 30 days old
      remaining_days: 60
  when: scylla_ssl.use_valid_ca is defined and scylla_ssl.use_valid_ca|bool





- name: Get ACME challenge
    acme_certificate:
      account_email: "{{cert.email_address}}"
      account_key: "{{tempdir.path}}/letsencrypt_account.pem"
      acme_directory: "{{acme_directory}}"
      acme_version: 2
      challenge: dns-01
      chain_dest:  "{{tempdir.path}}/intermediate.pem"
      csr: "{{tempdir.path}}/{{cert_name}}.csr"
      dest: "{{tempdir.path}}/{{cert_name}}.cert"
      terms_agreed: yes
      remaining_days: "{{remaining_days}}"
    register: acme_data






- name: Copy the certificates into their proper locations
  copy:
    src: "{{ item }}"
    dest: "{{ scylla_ssl.cert_path }}/{{ item | basename }}"
    owner: root
    group: root
    mode: '0644'
  become: true
  loop:
    - "{{ _localhost_cert_path }}/ssl/ca/{{ scylla_cluster_name }}-ca.crt"
    - "{{ _localhost_cert_path }}/ssl/{{ inventory_hostname }}/{{ inventory_hostname }}.crt"
    - "{{ _localhost_cert_path }}/ssl/{{ inventory_hostname }}/{{ inventory_hostname }}.pem"

- name: Generate cqlshrc
  template:
    src: templates/cqlshrc.j2
    dest: "{{ _localhost_cert_path }}/cqlshrc"
  delegate_to: localhost
  run_once: true

