---
- set_fact:
    _localhost_cert_path: "{{ scylla_ssl.localhost_cert_path | default(inventory_dir) }}"

- name: For every node, check if crt file exists
  stat:
    path: "{{ _localhost_cert_path }}/ssl/{{ hostvars[item]['inventory_hostname'] }}/{{ hostvars[item]['inventory_hostname'] }}.crt"
  register: _node_crt
  loop: "{{ groups['scylla'] }}"
  delegate_to: localhost
  run_once: true

- name: For every node, check if key file exists
  stat:
    path: "{{ _localhost_cert_path }}/ssl/{{ hostvars[item]['inventory_hostname'] }}/{{ hostvars[item]['inventory_hostname'] }}.pem"
  register: _node_key
  loop: "{{ groups['scylla'] }}"
  delegate_to: localhost
  run_once: true

- name: Set existence of crt and key as a single fact
  set_fact:
    _crt_and_key_exist: "{{ item.stat.exists }}"
  loop: "{{ _node_crt.results + _node_key.results }}"
  when: _crt_and_key_exist is not defined or _crt_and_key_exist == True
  run_once: true

- name: Check if CA exists
  block:
    - name: Check if CA crt file exists
      stat:
        path: "{{ _localhost_cert_path }}/ssl/ca/{{ scylla_cluster_name }}-ca.crt"
      register: _ca_crt
    - name: Check if CA key file exists
      stat:
        path: "{{ _localhost_cert_path }}/ssl/ca/{{ scylla_cluster_name }}-ca.pem"
      register: _ca_key
    - set_fact:
        _ca_crt_and_key_exist: "{{ _ca_crt.stat.exists|bool and _ca_key.stat.exists|bool }}"
  delegate_to: localhost
  run_once: true

- fail:
    msg: "If you want to use your own node certificates you also have to provide a CA"
  when: _crt_and_key_exist and not _ca_crt_and_key_exist

- name: If crt and keys were not provided for all nodes and no CA was provided, generate a self-signed CA
  block:
    - name: Create dir for the CA
      file:
        path: "{{ _localhost_cert_path }}/ssl/ca"
        state: directory

    - name: Generate an OpenSSL private key for the CA.
      openssl_privatekey:
        path: "{{ _localhost_cert_path }}/ssl/ca/{{ scylla_cluster_name }}-ca.pem"

    - name: Generate an OpenSSL Certificate Signing Request for the CA
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ _localhost_cert_path }}/ssl/ca/{{ scylla_cluster_name }}-ca.pem"
        common_name: "{{ scylla_cluster_name }}.internal"
        use_common_name_for_san: false  # since we do not specify SANs, don't use CN as a SAN
        basic_constraints:
          - 'CA:TRUE'
        basic_constraints_critical: yes
        key_usage:
          - keyCertSign
        key_usage_critical: true
      register: ca_csr

    - name: Generate a Self Signed OpenSSL certificate for the CA
      community.crypto.x509_certificate:
        path: "{{ _localhost_cert_path }}/ssl/ca/{{scylla_cluster_name }}-ca.crt"
        privatekey_path: "{{ _localhost_cert_path }}/ssl/ca/{{ scylla_cluster_name }}-ca.pem"
        csr_content: "{{ ca_csr.csr }}"
        provider: selfsigned
  when: _crt_and_key_exist == False and _ca_crt_and_key_exist == False
  delegate_to: localhost
  run_once: true

- name: Generate CSR
  block:
    - name: Create a directory for the key
      file:
        path: "{{ scylla_ssl.localhost_node_cert_path }}"
        state: directory
      delegate_to: localhost

    - name: Generate an OpenSSL private key.
      openssl_privatekey:
        path: "{{ scylla_ssl.localhost_node_cert_path }}/scylla.pem"
      delegate_to: localhost

    - name: Generate an OpenSSL Certificate Signing Request
      openssl_csr:
        path: "{{ scylla_ssl.localhost_node_cert_path }}/scylla.csr"
        privatekey_path: "{{ scylla_ssl.localhost_node_cert_path }}/scylla.pem"
        common_name: "{{ scylla_ssl.common_name }}"
      delegate_to: localhost
  when: _crt_and_key_exist == False


- name: Generate an OpenSSL certificate signed with our CA certificate
  openssl_certificate:
    path: "{{ scylla_ssl.localhost_node_cert_path }}/scylla.crt"
    csr_path: "{{ scylla_ssl.localhost_node_cert_path }}/scylla.csr"
    ownca_path: "{{ _localhost_cert_path }}/ssl/ca/{{scylla_cluster_name }}-ca.crt"
    ownca_privatekey_path: "{{ _localhost_cert_path }}/ssl/ca/{{ scylla_cluster_name }}-ca.pem"
    provider: ownca
  delegate_to: localhost
  when: scylla_ssl.use_valid_ca is not defined or scylla_ssl.use_valid_ca|bool == false

- name: Use ACME account for signing the certificates
  block:
    - name: Create a DNS-01 challenge 
      acme_certificate:
        acme_version: 2
        account_key_src: "{{ scylla_ssl.acme_account_key }}"
        account_email: "{{ scylla_ssl.acme_account_email }}"
        src: "{{ scylla_ssl.localhost_node_cert_path }}/scylla.csr"
        cert: "{{ scylla_ssl.localhost_node_cert_path }}/scylla.crt"
        challenge: dns-01
        acme_directory: https://acme-staging-v02.api.letsencrypt.org/directory
        terms_agreed: yes
        #acme_directory: https://acme-v01.api.letsencrypt.org/directory
        # Renew if the certificate is at least 30 days old
        remaining_days: 30
      register: dns_challenge
  when: scylla_ssl.use_valid_ca is defined and scylla_ssl.use_valid_ca|bool
  delegate_to: localhost

- name: create a resource record set
  gcp_dns_resource_record_set:
    name: "{{ dns_challenge.challenge_data[scylla_ssl.common_name]['dns-01'].record }}."
    #name: "node5.test.fe.ops.scylladb.com."
    managed_zone: "{{ scylla_ssl.dns_zone }}"
    type: TXT
    ttl: 600
    target:
    - "{{ dns_challenge.challenge_data[scylla_ssl.common_name]['dns-01'].resource_value }}"
    project: skilled-adapter-452
    auth_kind: "application"
    state: present
  run_once: true
  delegate_to: localhost
  when: dns_challenge is changed and scylla_ssl.common_name in dns_challenge.challenge_data


- name: Let the challenge be validated and retrieve the cert and intermediate certificate
  acme_certificate:
    acme_version: 2
    account_key_src: "{{ scylla_ssl.acme_account_key }}"
    account_email: "{{ scylla_ssl.acme_account_email }}"
    src: "{{ scylla_ssl.localhost_node_cert_path }}/scylla.csr"
    cert: "{{ scylla_ssl.localhost_node_cert_path }}/scylla.crt"
    fullchain: "{{ scylla_ssl.localhost_node_cert_path }}/scylla-fullchain.crt"
    chain: "{{ scylla_ssl.localhost_node_cert_path }}/scylla-intermediate.crt"
    challenge: dns-01
    acme_directory: https://acme-staging-v02.api.letsencrypt.org/directory
    remaining_days: 30
    data: "{{ dns_challenge }}"
  when: scylla_ssl.use_valid_ca is defined and scylla_ssl.use_valid_ca|bool
  delegate_to: localhost
