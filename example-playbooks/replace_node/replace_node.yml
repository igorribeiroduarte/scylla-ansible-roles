---
# This play will make sure that the node being replaced is down and prevent it from trying to re-join
# the cluster by blocking its ip via iptables.
- name: Prepare nodes before replacement
  hosts: scylla
  vars_files:
    - vars/main.yml
  tasks:
    - name: Resolve a scylla_listen_address as a fact
      set_fact:
        listen_address: "{{ alive_nodes_listen_address }}"

    - name: Resolve scylla_broadcast_address as a fact
      set_fact:
        broadcast_address: "{{ alive_nodes_broadcast_address }}"

    - fail:
        msg: "The replaced node can't be a seed!"
      when: replaced_node_broadcast_address in scylla_seeds
      run_once: true

    - fail:
        msg: "The new node can't be a seed!"
      when: new_node in scylla_seeds
      run_once: true

    - name: Save one of the seeds as a fact in order to run some checks
      set_fact:
        alive_node: "{{ item }}"
      loop: "{{ scylla_seeds }}"
      run_once: true

    - name: Check if CQL port is up on {{ replaced_node_broadcast_address }}
      wait_for:
        port: "{{ cql_port }}"
        host: "{{ replaced_node_broadcast_address }}"
        timeout: 60
      register: _wait_for_cql_port_output
      ignore_errors: true
      delegate_to: "{{ alive_node }}"
      run_once: true

    - name: Validate that the node being replaced is down
      fail:
        msg: "The node {{ replaced_node }} must be down in order to be replaced!"
      when: _wait_for_cql_port_output.failed|bool == false
      run_once: true

    - name: Check if the other nodes are UP
      wait_for:
        port: "{{ cql_port }}"
        host: "{{ listen_address }}"
        timeout: 60
      when: inventory_hostname != new_node

    - name: Block replaced node's broadcast_address to prevent it from trying to join the cluster again
      iptables:
        chain: INPUT
        source: "{{ replaced_node_broadcast_address }}"
        jump: DROP
      become: true

    # By doing this we make sure that the new node will have the same io_properties as the others
    - name: Save io_properties from the seed node
      block:
        - name: store /etc/scylla.d/io_properties.yaml
          shell: |
            cat /etc/scylla.d/io_properties.yaml
          register: _io_properties

        - set_fact:
            io_properties: "{{ _io_properties.stdout }}"
      delegate_to: "{{ alive_node }}"
      run_once: true
